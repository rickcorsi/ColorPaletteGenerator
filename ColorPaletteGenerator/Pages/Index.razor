@page "/"
@using MudBlazor.Utilities;
@using System.Drawing;
@using System.Text.RegularExpressions
@using System.ComponentModel

<PageTitle>Color Palette Generator</PageTitle>
<style>
        :root {

        }
</style>

<div class="mainarea">
    <div id="inputArea">
        <div id="classPick" class="colorpicker">
            <div class="toolheader" style="">
                <label class="maintext-large">Color Picker</label>
            </div> 
            <div style="display: flex; justify-content: start; margin-bottom: 10px; transition: .5s;">
                <MudColorPicker Value="_pickerColor" ValueChanged="UpdateSelectedColor" Class="colorpickerinput" DisableToolbar="false" DisableAlpha="true" DisableColorField="false" DisablePreview="true" DisableSliders="false" DisableInputs="true" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static" />
                <div style="margin-bottom: 10px;">
                <MudList Clickable="true" SelectedItemChanged="ChangeSelectedColor">
                <MudListItem Style="max-width: 205px" OnClick="firstColorTrue">
                    <div class="colorpreview" style="@($"background-color:{firstColor};")"></div>
                </MudListItem>
                <MudTextField @bind-Value="firstColorConverted" Style="margin-right: 7px; margin-bottom: 7px; max-width: 205px" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" AdornmentAriaLabel="Refresh" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
                </MudList>
                <button class="button-updatecolor" onclick="@HEXColorEntered">Update Color</button>
                    <MudText Style="margin-top: 15px;">Recent Colors</MudText>
                    <div class="recentcolors">         
                        <button id="recentbutton0" @onclick="() => setPickedColor(0)" class="colorpreviewsmall" style="background-color: @recentColor[0]"></button>
                        <button @onclick="() => setPickedColor(1)" class="colorpreviewsmall" style="background-color: @recentColor[1]"></button>
                        <button @onclick="() => setPickedColor(2)" class="colorpreviewsmall" style="background-color: @recentColor[2]"></button>
                        <button @onclick="() => setPickedColor(3)" class="colorpreviewsmall" style="background-color: @recentColor[3]"></button>
                        <button @onclick="() => setPickedColor(4)" class="colorpreviewsmall" style="background-color: @recentColor[4]"></button>
                        <button @onclick="() => setPickedColor(5)" class="colorpreviewsmall" style="background-color: @recentColor[5]"></button>
                        <button @onclick="() => setPickedColor(6)" class="colorpreviewsmall" style="background-color: @recentColor[6]"></button>
                        <button @onclick="() => setPickedColor(7)" class="colorpreviewsmall" style="background-color: @recentColor[7]"></button>
                        <button @onclick="() => setPickedColor(8)" class="colorpreviewsmall" style="background-color: @recentColor[8]"></button>
                        <button @onclick="() => setPickedColor(9)" class="colorpreviewsmall" style="background-color: @recentColor[9]"></button>
                        <button @onclick="() => setPickedColor(10)" class="colorpreviewsmall" style="background-color: @recentColor[10]"></button>
                        <button @onclick="() => setPickedColor(11)" class="colorpreviewsmall" style="background-color: @recentColor[11]"></button>
                        <button @onclick="() => setPickedColor(12)" class="colorpreviewsmall" style="background-color: @recentColor[12]"></button>
                        <button @onclick="() => setPickedColor(13)" class="colorpreviewsmall" style="background-color: @recentColor[13]"></button>
                        <button @onclick="() => setPickedColor(14)" class="colorpreviewsmall" style="background-color: @recentColor[14]"></button>
                        <button @onclick="() => setPickedColor(15)" class="colorpreviewsmall" style="background-color: @recentColor[15]"></button>
                        <button @onclick="() => setPickedColor(16)" class="colorpreviewsmall" style="background-color: @recentColor[16]"></button>
                        <button @onclick="() => setPickedColor(17)" class="colorpreviewsmall" style="background-color: @recentColor[17]"></button>
                        <button @onclick="() => setPickedColor(18)" class="colorpreviewsmall" style="background-color: @recentColor[18]"></button>
                        <button @onclick="() => setPickedColor(19)" class="colorpreviewsmall" style="background-color: @recentColor[19]"></button>
                        <button @onclick="() => setPickedColor(20)" class="colorpreviewsmall" style="background-color: @recentColor[20]"></button>
                        <button @onclick="() => setPickedColor(21)" class="colorpreviewsmall" style="background-color: @recentColor[21]"></button>
                        <button @onclick="() => setPickedColor(22)" class="colorpreviewsmall" style="background-color: @recentColor[22]"></button>
                        <button @onclick="() => setPickedColor(23)" class="colorpreviewsmall" style="background-color: @recentColor[23]"></button>
                        <button @onclick="() => setPickedColor(24)" class="colorpreviewsmall" style="background-color: @recentColor[24]"></button>
                        <button @onclick="() => setPickedColor(25)" class="colorpreviewsmall" style="background-color: @recentColor[25]"></button>
                        <button @onclick="() => setPickedColor(26)" class="colorpreviewsmall" style="background-color: @recentColor[26]"></button>
                        <button @onclick="() => setPickedColor(27)" class="colorpreviewsmall" style="background-color: @recentColor[27]"></button>
                        <button @onclick="() => setPickedColor(28)" class="colorpreviewsmall" style="background-color: @recentColor[28]"></button>
                        <button @onclick="() => setPickedColor(29)" class="colorpreviewsmall" style="background-color: @recentColor[29]"></button>
                        <button @onclick="() => setPickedColor(30)" class="colorpreviewsmall" style="background-color: @recentColor[30]"></button>
                        <button @onclick="() => setPickedColor(31)" class="colorpreviewsmall" style="background-color: @recentColor[31]"></button>     
                        <button @onclick="() => setPickedColor(32)" class="colorpreviewsmall" style="background-color: @recentColor[32]"></button>
                        <button @onclick="() => setPickedColor(33)" class="colorpreviewsmall" style="background-color: @recentColor[33]"></button>
                        <button @onclick="() => setPickedColor(34)" class="colorpreviewsmall" style="background-color: @recentColor[34]"></button>
                        <button @onclick="() => setPickedColor(35)" class="colorpreviewsmall" style="background-color: @recentColor[35]"></button>
                        <button @onclick="() => setPickedColor(36)" class="colorpreviewsmall" style="background-color: @recentColor[36]"></button>
                        <button @onclick="() => setPickedColor(37)" class="colorpreviewsmall" style="background-color: @recentColor[37]"></button>
                        <button @onclick="() => setPickedColor(38)" class="colorpreviewsmall" style="background-color: @recentColor[38]"></button>
                        <button @onclick="() => setPickedColor(39)" class="colorpreviewsmall" style="background-color: @recentColor[39]"></button>   
                    </div>
                </div>
            </div>
        </div>
@*        <button id="toggleButton" class="toggleFavView" onclick="toggleFavoritesView()">Toggle</button>*@   
    <label id="favsText" class="textFavorites">Favorites</label>
        <div>
            <div id="favorites" class="favoritedColors"></div>
            <div class="favoritedColorsMask">
                <div class="favoritedColorsObj"></div>
                <div class="favoritedColorsControls">
                    <button id="saveFavs" onclick="saveFavorites()" class="favButtonSave"><MudIcon Icon="@Icons.Material.Filled.Save" Title="Favorite"/></button>
                    <button id="clearFavs" onclick="closeAll()" class="favButtonClose"><MudIcon Icon="@Icons.Material.Filled.Close" Title="Favorite"/></button>
                </div>
                </div>
            <div class="selectmask">
                <div id="selectedColor" class="paletteSelect">
                    <div id="selectedColorButtons">
                    <button id="selectedColorCopy" class="copyButton" title="click here"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="selectedColorExpand" class="closeButton"><MudIcon Icon="@Icons.Material.Filled.RemoveRedEye" Title="Favorite"/></button>
                    <button id="selectedColorDelete" class="expandButton"><MudIcon Icon="@Icons.Material.Filled.Close" Title="Favorite"/></button>
                    </div>
                    <div class="paletteselectinfo">
                    <label id="selectedColorTextHEX" class="palettetext"></label>
                    </div>
                </div>
            </div>
        </div>
@*        <div>
            <div id="favoritesSmall" class="favoritedColorsSmall"></div>
            <div class="favoritedColorsMask"><div class="favoritedColorsObj"></div></div>
            <div class="selectmaskSmall">
                <div id="selectedColorSmall" class="paletteSelectSmall">
                </div>
            </div>
        </div>*@
    </div>

    <div>
        <div id="fullColor" class="fullview">
            <div id="fullColorHEX" onclick="toggleHide()" class="textHex"></div>
            <button id="selectedColorExpandDownload" class="downloadPreviewButton" onclick="downloadPreview()"><MudIcon Icon="@Icons.Material.Filled.Download" Title="Favorite"/></button>
            <button id="selectedColorExpandClose" class="closePreviewButton" onclick="closePreview()"><MudIcon Icon="@Icons.Material.Filled.RemoveCircleOutline" Title="Favorite"/></button>
        </div>
        <div class="palettearea">
            <div id="paletteColorDefault" class="palettecolor" style="background-color: @palettebrightnessDark[0]">
                <div class="paletteinfo"style="background-color: @palettebrightnessDark[0]">
                    <label class="palettetext" style="color: @paletteInfoTextColor1[0]">@palettebrightnessDark[0]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessDark[0]">
                    <button id="paletteCopy_00" onclick="copyColorSelect('@palettebrightnessDark[0]', '00')" style="color: @paletteInfoTextColor1[0]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_00" onclick="openColorSelect('@palettebrightnessDark[0]', '00')" style="color: @paletteInfoTextColor1[0]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessDark[1]">
                <div class="paletteinfo" style="background-color: @palettebrightnessDark[1]">
                    <label class="palettetext" style="color: @paletteInfoTextColor1[1]">@palettebrightnessDark[1]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessDark[1]">
                    <button id="paletteCopy_01" onclick="copyColorSelect('@palettebrightnessDark[1]', '01')" style="color: @paletteInfoTextColor1[1]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_01" onclick="openColorSelect('@palettebrightnessDark[1]', '01')" style="color: @paletteInfoTextColor1[1]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessDark[2]">
                <div class="paletteinfo" style="background-color: @palettebrightnessDark[2]">
                    <label class="palettetext" style="color: @paletteInfoTextColor1[2]">@palettebrightnessDark[2]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessDark[2]">
                    <button id="paletteCopy_02" onclick="copyColorSelect('@palettebrightnessDark[2]', '02')" style="color: @paletteInfoTextColor1[2]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_02" onclick="openColorSelect('@palettebrightnessDark[2]', '02')" style="color: @paletteInfoTextColor1[2]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessDark[3]">
                <div class="paletteinfo" style="background-color: @palettebrightnessDark[3]">
                    <label class="palettetext" style="color: @paletteInfoTextColor1[3]">@palettebrightnessDark[3]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessDark[3]">
                    <button id="paletteCopy_03" onclick="copyColorSelect('@palettebrightnessDark[3]', '03')" style="color: @paletteInfoTextColor1[3]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_03" onclick="openColorSelect('@palettebrightnessDark[3]', '03')" style="color: @paletteInfoTextColor1[3]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessDark[4]">
                <div class="paletteinfo" style="background-color: @palettebrightnessDark[4]">
                    <label class="palettetext" style="color: @paletteInfoTextColor1[4]">@palettebrightnessDark[4]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessDark[4]">
                    <button id="paletteCopy_04" onclick="copyColorSelect('@palettebrightnessDark[4]', '04')" style="color: @paletteInfoTextColor1[4]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_04" onclick="openColorSelect('@palettebrightnessDark[4]', '04')" style="color: @paletteInfoTextColor1[4]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
        </div>
        <div class="palettearea">
            <div class="palettecolor" style="background-color: @palettebrightnessLight[0]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[0]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[0]">@palettebrightnessLight[0]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[0]">
                    <button id="paletteCopy_05" onclick="copyColorSelect('@palettebrightnessLight[0]', '05')" style="color: @paletteInfoTextColor2[0]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_05" onclick="openColorSelect('@palettebrightnessLight[0]', '05')" style="color: @paletteInfoTextColor2[0]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessLight[1]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[1]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[1]">@palettebrightnessLight[1]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[1]">
                    <button id="paletteCopy_06" onclick="copyColorSelect('@palettebrightnessLight[1]', '06')" style="color: @paletteInfoTextColor2[1]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_06" onclick="openColorSelect('@palettebrightnessLight[1]', '06')" style="color: @paletteInfoTextColor2[1]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessLight[2]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[2]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[2]">@palettebrightnessLight[2]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[2]">
                    <button id="paletteCopy_07" onclick="copyColorSelect('@palettebrightnessLight[2]', '07')" style="color: @paletteInfoTextColor2[2]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_07" onclick="openColorSelect('@palettebrightnessLight[2]', '07')" style="color: @paletteInfoTextColor2[2]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessLight[3]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[3]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[3]">@palettebrightnessLight[3]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[3]">
                    <button id="paletteCopy_08" onclick="copyColorSelect('@palettebrightnessLight[3]', '08')" style="color: @paletteInfoTextColor2[3]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_08" onclick="openColorSelect('@palettebrightnessLight[3]', '08')" style="color: @paletteInfoTextColor2[3]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor" style="background-color: @palettebrightnessLight[4]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[4]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[4]">@palettebrightnessLight[4]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[4]">
                    <button id="paletteCopy_09" onclick="copyColorSelect('@palettebrightnessLight[4]', '09')" style="color: @paletteInfoTextColor2[4]" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_09" onclick="openColorSelect('@palettebrightnessLight[4]', '09')" style="color: @paletteInfoTextColor2[4]" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
        </div>
        <div class="palettearea">
            <div class="palettecolor-primary" style="background-color: @palettebrightnessLight[0]">
                <div class="paletteinfo" style="background-color: @palettebrightnessLight[0]">
                    <label class="palettetext" style="color: @paletteInfoTextColor2[0]">@palettebrightnessLight[0]</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettebrightnessLight[0]">
                    <button id="paletteCopy_10" onclick="copyColorSelect('@palettebrightnessLight[0]', '10')" style="color: @paletteInfoTextColor2[0]; right: -450px;" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_10" onclick="openColorSelect('@palettebrightnessLight[0]', '10')" style="color: @paletteInfoTextColor2[0]; right: -450px;" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
            <div class="palettecolor-comp" style="background-color: @palettecomp">
                <div class="paletteinfo" style="background-color: @palettecomp">
                    <label class="palettetext" style="color: @paletteInfoTextComp">@palettecomp</label>
                </div>
                <div class="palettebuttons"style="background-color: @palettecomp">
                    <button id="paletteCopy_11" onclick="copyColorSelect('@palettecomp', '11')" style="color: @paletteInfoTextComp" class="copyButtonPalette"><MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Favorite"/></button>
                    <button id="paletteFav_11" onclick="openColorSelect('@palettecomp', '11')" style="color: @paletteInfoTextComp" class="favButtonPalette"><MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Title="Favorite"/></button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="alertContain" class="alertContainer">
    <label id="alert" class="alertText"></label>
</div>
@code{
    protected override void OnInitialized()
    {
        GenerateRandomColor();
    }
    string firstColorConverted = "#04f6d2"; //Default Color
    void GenerateRandomColor()
    {
        Random rand = new Random();
        firstColorConverted = $"#{rand.Next(0x1000000):X6}";
        HEXColorEntered();
    }
    //Color Picker
    private bool App_ColorPicker = false;
    private bool isFirstColor = true;
    private bool isSecondColor = false;
    private bool isExpandedColorPicker = false;
    private bool isDarkMode = false;
    private bool _isDarkMode = false;
    private bool customThemeCreated = false;
    private bool theme1 = true;
    private bool theme2 = false;
    private bool theme3 = false;
    private bool theme4 = false;
    private bool theme5 = false;
    public MudColor firstColor = "#0476f6";
    public MudColor secondColor = "#ed0c3d";
    public MudColor _pickerColor = "#0476f6";
    public MudColor basecolor = "#ffffff";
    string colorValStr = "#######";
    string[] recentColor = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    string[] palettebrightnessDark = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    string[] palettebrightnessLight = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    string[] paletteInfoTextColor1 = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    string[] paletteInfoTextColor2 = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    string palettecomp = "ffffff";
    string paletteInfoTextComp = "ffffff";
    public float intensity = -.25f;
    private void ChangeSelectedColor(MudListItem item)
    {
        _pickerColor = firstColor;
        UpdateSelectedColor(firstColor);
    }

    private void setPaletteComplementaryColor()
    {
        // Assuming recentColor[0] is a string representing a color in HEX format, e.g., "#RRGGBB"
        string baseColorHex = recentColor[0];

        // Convert the HEX string to a Color object
        System.Drawing.Color baseColor = System.Drawing.ColorTranslator.FromHtml(baseColorHex);

        // Calculate the complementary color
        System.Drawing.Color complementaryColor = CalculateComplementaryColor(baseColor);

        // Convert the complementary color back to HEX format
        palettecomp = System.Drawing.ColorTranslator.ToHtml(complementaryColor);
        MudColor temp = palettecomp;
        if (temp.L > .500){
            paletteInfoTextComp = "#000000";
        }
        else {
            paletteInfoTextComp = "#ffffff";
        }
        // Now, palettecomp contains the complementary color in HEX format
    }

    private System.Drawing.Color CalculateComplementaryColor(System.Drawing.Color baseColor)
    {
        int red = 255 - baseColor.R;
        int green = 255 - baseColor.G;
        int blue = 255 - baseColor.B;

        return System.Drawing.Color.FromArgb(red, green, blue);
    }

    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;
        firstColor = value;
        firstColorConverted = firstColor.ToString(MudColorOutputFormats.Hex);
    }
    private void firstColorTrue()
    {
        _pickerColor = firstColorConverted;
        isFirstColor = true;
        isSecondColor = false;
        setRecentColor();
    }
    private void HEXColorEntered()
    {
        if (firstColorConverted.Contains("##"))
        {
            firstColorConverted = firstColorConverted.Replace("##", "#");
        }
        var regex = @"(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)";
        var match = Regex.Match(firstColorConverted, regex,RegexOptions.IgnoreCase);
        if (!match.Success)
        {
            Console.Write("Matches: " + match);
            firstColorConverted = "#000000";
        }
        firstColor = firstColorConverted;
        if (isFirstColor == true){
            _pickerColor = firstColorConverted;
        }
        setRecentColor();
    }
    public static System.Drawing.Color ChangeColorBrightness(System.Drawing.Color color, float correctionFactor)
    {
        float red = (float)color.R;
        float green = (float)color.G;
        float blue = (float)color.B;
        if (correctionFactor < 0)
        {
            correctionFactor = 1 + correctionFactor;
            red *= correctionFactor;
            green *= correctionFactor;
            blue *= correctionFactor;
        }
        else
        {
            red = (255 - red) * correctionFactor + red;
            green = (255 - green) * correctionFactor + green;
            blue = (255 - blue) * correctionFactor + blue;
        }
        return System.Drawing.Color.FromArgb(color.A, (int)red, (int)green, (int)blue);
    }
    public static System.Drawing.Color StringToColor(string colorStr)
    {
        TypeConverter cc = TypeDescriptor.GetConverter(typeof(System.Drawing.Color));
        var result = (System.Drawing.Color)cc.ConvertFromString(colorStr);
        return result;
    }
    private static String HexConverter(System.Drawing.Color c)
    {
        return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
    }
    private void setRecentColor() 
    {
        if (recentColor[0] != _pickerColor)
        {
            string tempRecentColor = recentColor[recentColor.Length - 1];
            for (int t = recentColor.Length - 1; t > 0; t--)
            {
                recentColor[t] = recentColor[t-1];
            }
            recentColor[0] = tempRecentColor;
            recentColor[0] = _pickerColor.ToString(MudColorOutputFormats.Hex);
            setPaletteBrightnessDarker();
            setPaletteBrightnessLighter();
            setPaletteComplementaryColor();
        }
    }
    private void setColor() 
    {
        if (recentColor[0] != _pickerColor)
        {
            string tempRecentColor = recentColor[recentColor.Length - 1];
            for (int t = recentColor.Length - 1; t > 0; t--)
            {
                recentColor[t] = recentColor[t-1];
            }
            recentColor[0] = tempRecentColor;
            recentColor[0] = _pickerColor.ToString(MudColorOutputFormats.Hex);
            setPaletteBrightnessDarker();
            setPaletteBrightnessLighter();
            setPaletteComplementaryColor();
        }
    }
    private void setPaletteBrightnessDarker()
    {
        System.Drawing.Color _basecolor = StringToColor(recentColor[0]);
        for (int t = 0; t < palettebrightnessDark.Length; t++)
        {
            if (t != 0)
            {
                _basecolor = ChangeColorBrightness(_basecolor, intensity);
            }
            palettebrightnessDark[t] = HexConverter(_basecolor);
            basecolor = palettebrightnessDark[t];
            if (basecolor.L > .500){
                paletteInfoTextColor1[t] = "#000000";
            }
            else {
                paletteInfoTextColor1[t] = "#ffffff";
            }
        }
    }
    private void setPaletteBrightnessLighter()
    {
        System.Drawing.Color _basecolor = StringToColor(recentColor[0]);
        for (int t = 0; t < palettebrightnessLight.Length; t++)
        {
            if (t != 0)
            {
                _basecolor = ChangeColorBrightness(_basecolor, .25f);
            }
            palettebrightnessLight[t] = HexConverter(_basecolor);
            basecolor = palettebrightnessLight[t];
            if (basecolor.L > .500){
                paletteInfoTextColor2[t] = "#000000";
            }
            else {
                paletteInfoTextColor2[t] = "#ffffff";
            }
        }
    }
    private void setPickedColor(int n) {
        _pickerColor = recentColor[n];
        setRecentColor();
    }

}